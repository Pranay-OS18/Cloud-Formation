AWSTemplateFormatVersion: '2010-09-09'
Description: Multi-Tier Architecture

Parameters:
  VPCName:
    Type: String
    Default: MyVPC
    Description: The name of the VPC

  CidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR block for the VPC

  PublicSubnetCidrBlock:
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CidrBlock:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2CidrBlock:
    Type: String
    Default: 10.0.3.0/24

  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for web and application tiers

  KeyPairName:
    Type: String
    Description: The name of the SSH key pair for accessing the EC2 instances

  RDSUsername:
    Type: String
    Default: admin
    Description: The master username for the RDS instance

  RDSPassword:
    Type: String
    NoEcho: true
    Description: The master password for the RDS instance
  SnsEmail:
    Type: String
    Description: Email address for SNS notifications upon successful stack creation

Resources:

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'CloudFormation Stack Notifications'

  # Subscribe the SNS Topic to send email notifications
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !Ref SnsEmail
      Protocol: email

  # EventBridge Rule to trigger SNS Notification on successful stack creation
  StackCreateEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
        - 'aws.cloudformation'
        detail-type:
        - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
          - 'cloudformation.amazonaws.com'
          eventName:
          - 'CreateStack'
          responseElements:
            stackStatus:
            - 'CREATE_COMPLETE'
      Targets:
      - Arn: !Ref SNSTopic
        Id: 'SendToSNS'

  # Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref VPCName

  # Internet Gateway and VPC Attachment
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidrBlock
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true

  # Public Route Table and Route
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway and EIP
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: NAT-GW

  # Private Subnet 1 (Application Tier)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: us-east-1b

  # Private Subnet 2 (Database Tier)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: us-east-1c

  # Private Route Table for NAT
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH only from Web Tier
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref WebSecurityGroup

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access only from App Tier
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref AppSecurityGroup

  # Web Tier EC2 Instance
  WebTierInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
      - !Ref WebSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: ami-0e001c9271cf7f3b9

  # Application Tier EC2 Instance
  AppTierInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PrivateSubnet1
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
      - !Ref AppSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: ami-0e001c9271cf7f3b9
  # RDS Subnet Group and Instance
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2

  RDSMySQLInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      EngineVersion: 8.0.35
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      AllocatedStorage: 20
      VPCSecurityGroups:
      - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
    DeletionPolicy: Retain



